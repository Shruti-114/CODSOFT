# Code for Task 3: Iris Flower Classification as a Jupyter notebook

iris_code = """
# Task 3: Iris Flower Classification

## 1. Import Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

## 2. Load Dataset

iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['species'] = iris.target
df['species'] = df['species'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})
df.head()

## 3. Data Visualization (Optional)

sns.pairplot(df, hue='species')
plt.show()

## 4. Preprocessing

X = df.drop('species', axis=1)
y = df['species']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

## 5. Train-Test Split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

## 6. Train the Model

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

## 7. Make Predictions & Evaluate

y_pred = model.predict(X_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues',
            xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()
"""

# Convert code to notebook
iris_notebook = nbf.new_notebook()
iris_notebook.cells = [nbf.new_code_cell(code) for code in iris_code.strip().split('\n\n')]

# Save the notebook
iris_path = "/mnt/data/Iris_Flower_Classification.ipynb"
with open(iris_path, "w") as f:
    nbformat.write(iris_notebook, f)

iris_path
