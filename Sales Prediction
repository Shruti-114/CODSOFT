# Code for Task 4: Sales Prediction Using Python as a Jupyter notebook

sales_code = """
# Task 4: Sales Prediction Using Python

## 1. Import Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

## 2. Load Dataset

# Replace with the correct path to the dataset if necessary
df = pd.read_csv('Advertising.csv')  # Assuming dataset with TV, Radio, Newspaper, and Sales columns
df.head()

## 3. Data Exploration

sns.pairplot(df)
plt.show()

correlation = df.corr()
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

## 4. Feature Selection

X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

## 5. Train-Test Split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

## 6. Train the Model

model = LinearRegression()
model.fit(X_train, y_train)

## 7. Make Predictions & Evaluate

y_pred = model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"Root Mean Squared Error: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

## 8. Visualization of Predictions

plt.figure(figsize=(8,5))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales")
plt.show()
"""

# Convert code to notebook
sales_notebook = nbf.new_notebook()
sales_notebook.cells = [nbf.new_code_cell(code) for code in sales_code.strip().split('\n\n')]

# Save the notebook
sales_path = "/mnt/data/Sales_Prediction.ipynb"
with open(sales_path, "w") as f:
    nbformat.write(sales_notebook, f)

sales_path
