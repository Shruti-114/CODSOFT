# Save the movie rating prediction code as a Jupyter notebook file
notebook_code = """
# Task 2: Movie Rating Prediction with Python

## 1. Install & Import Libraries

# Uncomment and run if needed
# !pip install pandas numpy matplotlib seaborn scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

## 2. Load Dataset

# Load the dataset (adjust the path if needed)
df = pd.read_csv('IMDb Top 1000.csv')
df.head()

## 3. Data Preprocessing

# Drop missing values
df.dropna(inplace=True)

# Convert 'IMDB Rating' to numeric
df['IMDB Rating'] = pd.to_numeric(df['IMDB Rating'], errors='coerce')

# Encode categorical features
df = df[['Genre', 'Director', 'Star1', 'IMDB Rating']]
df = pd.get_dummies(df, columns=['Genre', 'Director', 'Star1'], drop_first=True)

# Drop rows with missing ratings
df.dropna(subset=['IMDB Rating'], inplace=True)

## 4. Train-Test Split

X = df.drop('IMDB Rating', axis=1)
y = df['IMDB Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

## 5. Train the Model

model = LinearRegression()
model.fit(X_train, y_train)

## 6. Make Predictions & Evaluate

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Root Mean Squared Error: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

## 7. Visualization (Optional)

plt.figure(figsize=(8, 5))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel('Actual Rating')
plt.ylabel('Predicted Rating')
plt.title('Actual vs Predicted Movie Ratings')
plt.show()
"""

# Save the notebook code to a .py file

file_path = "/mnt/data/Movie_Rating_Prediction.py"
with open(file_path, "w") as f:
    f.write(notebook_code)
file_path
